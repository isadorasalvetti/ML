####################################################################
# Machine Learning - MIRI
# Llu√≠s A. Belanche
# LAB 1: Data pre-processing (practise)
# version of February 2019
####################################################################
# This exercise involves the use of the 'Auto' data set, which can be found in the file 'Auto.data'.
# The file contains a number of variables for cars.
graphics.off()      # reset/close all graphical devices
##### Reading the file 'Auto.data' (data on cars)
Auto <- read.table("Auto.data", header=TRUE, na.strings="?")
# put proper country of origin
Auto[,"origin"] <- factor(c("USA","EU","Japan")[Auto[,"origin"]])
# convert "miles per gallon" to "liters per km"
Auto[,"mpg"] <- 235.4/Auto[,"mpg"]
colnames(Auto)[which(colnames(Auto)=="mpg")] <- "l.100km"
# The car name is not useful for modelling, but it may be handy to keep it as the row name
# WARNING! surprisingly, car names are not unique, so we first prefix them by their row number
Auto$name <- paste (1:nrow(Auto), Auto$name)
rownames(Auto) <- Auto$name
Auto <- subset (Auto, select=-name)
# Now we go for the cylinders
table(Auto$cylinders)
# that's strange, some cars have an odd number of cylinders (are these errors?)
subset(Auto,cylinders==3)
# These Mazdas wear a Wankel engine, so this is correct
subset(Auto,cylinders==5)
# Yes, these Audis displayed five-cylinder engines, so the data is correct
# but, from summary(Auto) above we see that horsepower has 5 NA's that we'll need to take care of later ...
# so this is your departing data set
summary(Auto)
#attach(Auto)
# maybe you remember that plot from Lecture 1 ...
with (Auto, Auto.lm <<- lm(l.100km ~ horsepower, Auto))
plot(Auto[,"horsepower"],Auto[,"l.100km"],
pch=20,
xlab="horsepower",ylab="fuel consumption (l/100km)",
main="Linear regression")
# add regression line
a <- Auto.lm$coefficients["(Intercept)"]
b <- Auto.lm$coefficients["horsepower"]
abline(a=a,b=b,col="blue")
text(50,25,sprintf("y(x)=%.3fx+%.2f",b,a),col="red",pos=4)
# In order to crate quick LaTeX code, try this:
install.packages("xtable")
library(xtable)
xtable(Auto[1:4,])
xtable(Auto.lm)
# Was that nice?
# this is a list of R objects that can be embedded into a LaTeX table code:
methods(xtable)
View(Auto)
View(Auto)
# maybe you remember that plot from Lecture 1 ...
with (Auto, Auto.lm <<- lm(l.100km ~ horsepower, Auto))
plot(Auto[,"horsepower"],Auto[,"l.100km"],
pch=20,
xlab="horsepower",ylab="fuel consumption (l/100km)",
main="Linear regression")
# add regression line
a <- Auto.lm$coefficients["(Intercept)"]
b <- Auto.lm$coefficients["horsepower"]
abline(a=a,b=b,col="blue")
text(50,25,sprintf("y(x)=%.3fx+%.2f",b,a),col="red",pos=4)
# 5. make a decision on a sensible treatment for the missing values and apply it;
Auto.complete() = na.omit(Auto)
# 5. make a decision on a sensible treatment for the missing values and apply it;
Auto.complete = na.omit(Auto)
View(Auto.complete)
Auto.complete.summary
summary(Auto.complete)
#  WARNING: 'origin' is categorical and cannot be used for knn imputation, unless you make it binary temporarily
table(Auto.complete[, "Origin"]==0)
#  WARNING: 'origin' is categorical and cannot be used for knn imputation, unless you make it binary temporarily
table(Auto.complete[, "origin"]==0)
#  WARNING: 'origin' is categorical and cannot be used for knn imputation, unless you make it binary temporarily
table(Auto.complete[, "origin"]==NA)
#  WARNING: 'origin' is categorical and cannot be used for knn imputation, unless you make it binary temporarily
table(Auto.complete[, "origin"]==is.na)
#  WARNING: 'origin' is categorical and cannot be used for knn imputation, unless you make it binary temporarily
table(Auto.complete[, "origin"]==0)
Attach(Auto)
attach(Auto)
summary(Auto.complete)
summary(Auto)
HorsePower = knn.imputation (HorsePower, "horsepower")
source ("auxiliary.R")
HorsePower = knn.imputation (HorsePower, "horsepower")
View(knn.imputation)
HorsePower = knn.imputation (HorsePower, "horsepower", Auto)
knn.imputation = function (variable, varname, data)
{
aux = subset (data, select = names(data)[names(data) != varname])
aux1 = aux[!is.na(variable),]
aux2 = aux[is.na(variable),]
# Neither of aux1, aux2 can contain NAs
knn.inc = knn (aux1,aux2, variable[!is.na(variable)])
variable[is.na(variable)] = as.numeric(as.character(knn.inc))
variable
}
HorsePower = knn.imputation (HorsePower, "horsepower", Auto)
attach(Auto)
attach(Auto)
detach(Auto)
HorsePower = knn.imputation (HorsePower, "horsepower", Auto)
attach(Auto)
HorsePower = knn.imputation (HorsePower, "horsepower", Auto)
attach(Auto)
detach(Auto)
attach(Auto)
detach(Auto)
detach(Auto)
detach(Auto)
detach(Auto)
HorsePower = knn.imputation (HorsePower, "horsepower", Auto)
attach(Auto)
HorsePower = knn.imputation (HorsePower, "horsepower", Auto)
horsepower = knn.imputation (horsepower, "horsepower", Auto)
summary(horsepower)
summary(displacement)
summary(cylinders)
summary(l.100km)
summary(weight)
summary(year)
summary(origin)
summary(acceleration)
horsepower = knn.imputation (horsepower, "horsepower", Auto)
horsepower = knn.imputation (horsepower, "horsepower")
variable
knn.imputation = function (variable, varname)
{
aux = subset (Auto, select = names(Auto)[names(Auto) != varname])
aux1 = aux[!is.na(variable),]
aux2 = aux[is.na(variable),]
# Neither of aux1, aux2 can contain NAs
knn.inc = knn (aux1,aux2, variable[!is.na(variable)])
variable[is.na(variable)] = as.numeric(as.character(knn.inc))
variable
}
horsepower = knn.imputation (horsepower, "horsepower")
horsepower = knn.imputation (horsepower, "horsepower")
summary(origin)
origin[origin == EU] = 0
origin[origin == "EU"] = 0
origin = as.numeric(origin)
summary(origin)
horsepower = knn.imputation (horsepower, "horsepower")
summary(origin)
origin.factor = Auto[, "origin"]
Auto[, "origin"] = origin
horsepower = knn.imputation (horsepower, "horsepower")
summary(auto)
summary(Auto)
View(Auto.complete)
View(Auto)
origin[origin == NA] = 1
origin[is.na] = 1
== NA
origin[origin == NA] = 1
Auto[, "origin"] = origin
origin[origin.is.na] = 1
origin[origin == NA] = 1
origin[is.na(origin)] = 1
Auto[, "origin"] = origin
horsepower = knn.imputation (horsepower, "horsepower")
summary(horsepower)
